#!/usr/bin/env bash

###
# This script is a wrapper for the ruby based framework built to
# generate tests from ERB templates for this track.
#
# For documentation on this project please checkout *TODO*
###

SLUG="$1"
PATH_TO_CANONICAL_DATA="../problem-specifications/exercises/$SLUG/"
PATH_TO_EXERCISE="exercises/$SLUG/"
PATH_TO_TEST="${PATH_TO_EXERCISE}${SLUG/-/_}_test.sh"

usage () {
  echo "$0 <exercise-slug>" && exit 1
}

###
# Validate argument, template, and presence in problem-specifications.
# The constant '$PATH_TO_TEST' doesn't need to be checked because this
# script can generate a test even if there isn't a test already present.
###
check_arg_and_paths () {
  if [[ -z "$SLUG" ]]; then
    echo "$0 requires an exercise slug as an argument!"
    echo
    usage
  fi

  if ! [[ -d "$PATH_TO_CANONICAL_DATA" ]]; then\
    echo "Error: $SLUG is not in problem-specifications/exercises."
    echo
    echo "Aborting... Please get the exercise added first with a PR"
    echo "    to the exercism/problem-specifications repo."
    exit 1
  fi

  if ! [[ -f "${PATH_TO_EXERCISE}.meta/generator_template.erb" ]]; then
    echo "Error: There is no template for this exercise!"
    echo
    echo "Please review documentation at TODO for making new templates."
    exit 1
  fi
}

###
# Backup the old test file in case there is an error in the template.
# The test backup 'old_test.sh' is used in catch_ruby_error if there
# was a problem rendering the template.
###
save_old_test () {
  if [[ -f "$PATH_TO_TEST" ]]; then
    mv "$PATH_TO_TEST" "${PATH_TO_EXERCISE}old_test.sh"
  fi
}

###
# Revert the previous state of the test if the ruby sub-process returns
# anything other than a status of 0
###
catch_ruby_error () {
  if [[ "$?" -ne 0 ]]; then
    echo "Error: there was an error in the ruby sub-process!"
    echo
    echo "Check the template for errors."
    echo
    echo "Reverting test to previous state."

    # Revert the state of the test file
    cp "${PATH_TO_EXERCISE}old_test.sh" "$PATH_TO_TEST"
    exit 1
  fi
}

###
# The completion function congratulates the user and awaits their input
# before running the bin/validate-exercises script.
# After that script it encourages them to check the new test and clean
# up the backup test file if the bin/validate-exercises script proved
# that their new test is passed by example.sh for the exercise.
###
completion () {
  echo
  echo
  echo "Congratulations.  It seems like your template worked!"
  echo
  echo "Please check the version located near the top of the new test"
  echo "and make sure that it matches the version file located in"
  echo "${PATH_TO_EXERCISE}.meta"
  echo
  echo "Next we will run the bin/validate-exercises script to verify"
  echo "the integrety of the generated test."
  echo

  read -r -p "press any key to coninue: "

  bin/validate-exercises

  echo
  echo
  echo "If all the tests passed for your newly generated test file then"
  echo "please verify that it is formatted sensibly and then remove the"
  echo "${PATH_TO_EXERCISE}old_test.sh from the exercise directory."
  echo
  echo "If the tests didn't all pass you may have to update the"
  echo "${PATH_TO_EXERCISE}example.sh to pass any updates included"
  echo "in the new test."
  echo
  echo "Have a nice day and thank you for contributing!"
}

main () {

  check_arg_and_paths; save_old_test

  data="${PATH_TO_CANONICAL_DATA}canonical-data.json"

  ruby scripts/test_generator.rb "${SLUG/-/_}" "$PATH_TO_EXERCISE" "$data"

  catch_ruby_error

  completion
}

main
